name: Sanity Testing
on: workflow_dispatch

permissions:
  # required to retrieve AWS credentials
  id-token: write
  contents: write

# cancel currently running jobs if a new version of the branch is pushed
concurrency:
  group: sanity_testing-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Sanity-Tests:
    environment: Sanity Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: src/go.mod

      - run: make build

      - run: mkdir test_results

      # run the tests
      - name: Version Test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_CORSO_BUCKET: ${{ env.AWS_CORSO_BUCKET }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          CORSO_PASSPHRASE: ${{ secrets.CORSO_PASSPHRASE }}
        run: |
          if [ $( ./corso --version | grep 'Corso version:' | wc -l) -ne 1 ]
          then
              echo "valid version not found"
              exit 1
          fi


      # run the tests
      - name: Repo connect test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_CORSO_BUCKET: ${{ env.AWS_CORSO_BUCKET }} 
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          CORSO_PASSPHRASE: ${{ secrets.CORSO_PASSPHRASE }}
          TEST_RESULT: "test_results"

        run: |
          touch $TEST_RESULT/connect.txt
          ./corso repo connect s3 --hide-progress --bucket  ${CORSO_BUCKET} 2>&1 | tee $TEST_RESULT/connect.txt 
          valid_num=$(grep 'Connected to S3 bucket' $TEST_RESULT/connect.txt | wc -l)

          if [ $valid_num -ne 1 ]
          then
              echo "repo could not be connected"
              exit 1
          fi