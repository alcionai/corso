name: Build/Release Corso
env:
  IMAGE_NAME: ghcr.io/alcionai/corso
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags: ["v*.*.*"]

permissions:
  # required to retrieve AWS credentials
  id-token: write
  contents: write
  packages: write
  pull-requests: read

# cancel currently running jobs if a new version of the branch is pushed
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ----------------------------------------------------------------------------------------------------
  # --- Prechecks and Checkouts ------------------------------------------------------------------------
  # ----------------------------------------------------------------------------------------------------
  Precheck:
    uses: alcionai/corso/.github/workflows/_filechange_checker.yml@main

  Checkout:
    needs: [Precheck]
    environment: Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v3

      # single setup and sum cache handling here.
      # the results will cascade onto both testing and linting.
      - name: Setup Golang with cache
        uses: ./.github/actions/go-setup-cache
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.docfileschanged == 'true'
        with:
          go-version-file: src/go.mod

  # ----------------------------------------------------------------------------------------------------
  # --- Docs Linting -----------------------------------------------------------------------------------
  # ----------------------------------------------------------------------------------------------------

  Docs-Linting:
    needs: [Precheck, Checkout]
    environment: Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.docfileschanged == 'true' # docsfileschanged also includes srcfileschanged

    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang with cache
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.srcfileschanged == 'true'
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: src/go.mod

      - name: Generate CLI Docs
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.srcfileschanged == 'true'
        working-directory: ./src
        run: |
          go run ./cmd/mdgen/mdgen.go generate

      # migrate generated md files into /docs/docs/cli
      - name: Move CLI .md to Docs
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.srcfileschanged == 'true'
        run: |
          mkdir -p ./docs/docs/cli
          mv ./src/cmd/mdgen/cli_markdown/* ./docs/docs/cli/
          rm -R ./src/cmd/mdgen/cli_markdown/

      - uses: actions/upload-artifact@master
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.srcfileschanged == 'true'
        name: Upload cli docs as artifacts
        with:
          name: cli-docs
          path: docs/docs/cli

      - name: Install dependencies for docs lint
        run: |
          wget https://github.com/errata-ai/vale/releases/download/v2.20.2/vale_2.20.2_Linux_64-bit.tar.gz # NOTE: update in Dockerfile when updating
          mkdir bin && tar -xvzf vale_2.20.2_Linux_64-bit.tar.gz -C bin
          echo "$PWD/bin" >> $GITHUB_PATH
          npm i -g markdownlint-cli@0.32.2 # NOTE: update in Dockerfile when updating

      - name: Run docs lint
        env:
          CORSO_USE_DOCKER: -1 # prevent using docker inside makefile
        run: |
          cd docs && make -o genclidocs localcheck

  # ----------------------------------------------------------------------------------------------------
  # --- Integration and Unit Testing -------------------------------------------------------------------
  # ----------------------------------------------------------------------------------------------------

  Test-Suite:
    needs: [Precheck, Checkout]
    environment: Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.srcfileschanged == 'true'
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: src/go.mod

      - run: mkdir testlog

      # Install gotestfmt
      - name: Set up gotestfmt
        run: go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest

      # AWS creds
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: integration-testing
          aws-region: us-east-1

      # run the tests
      - name: Integration Tests
        env:
          AZURE_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.TENANT_ID }}
          CORSO_CI_TESTS: true
          CORSO_M356_TEST_USER_ID: ${{ secrets.CORSO_M356_TEST_USER_ID }}
          CORSO_PASSPHRASE: ${{ secrets.INTEGRATION_TEST_CORSO_PASSPHRASE }}
        run: |
          set -euo pipefail
          go test \
          -json   \
          -v      \
          ./... 2>&1 | tee ./testlog/gotest.log | gotestfmt -hide successful-tests

      # Upload the original go test log as an artifact for later review.
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-log
          path: src/testlog/gotest.log
          if-no-files-found: error
          retention-days: 14

  # ----------------------------------------------------------------------------------------------------
  # --- Source Code Linting ----------------------------------------------------------------------------
  # ----------------------------------------------------------------------------------------------------

  Linting:
    needs: [Precheck, Checkout]
    environment: Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.srcfileschanged == 'true'
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: src/go.mod

      - name: Go Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.45.2
          working-directory: src
          skip-cache: true

      # check licenses
      - name: Get go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Run go-licenses
        run: go-licenses check github.com/alcionai/corso/src --ignore github.com/alcionai/corso/src

  # ----------------------------------------------------------------------------------------------------
  # --- Publish steps ----------------------------------------------------------------------------------
  # ----------------------------------------------------------------------------------------------------

  SetEnv:
    environment: Testing
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.environment.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      imgtag: ${{ steps.imgtag.outputs.imgtag }}
    steps:
      - uses: actions/checkout@v3

      - name: Figure out environment
        id: environment
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
            echo "set-output name=environment::Production"
            echo "::set-output name=environment::Production"
          else
            echo "set-output name=environment::Testing"
            echo "::set-output name=environment::Testing"
          fi

      - name: Get version string
        id: version
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
            echo "set-output name=version::$(git describe --exact-match --tags $(git rev-parse HEAD))"
            echo "::set-output name=version::$(git describe --exact-match --tags $(git rev-parse HEAD))"
          else
            echo "set-output name=version::$(echo unreleased-$(git rev-parse --short HEAD))"
            echo "::set-output name=version::$(echo unreleased-$(git rev-parse --short HEAD))"
          fi

      - name: Get image tag
        id: imgtag
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
            echo "set-output name=imgtag::$(git describe --exact-match --tags $(git rev-parse HEAD))"
            echo "::set-output name=imgtag::$(git describe --exact-match --tags $(git rev-parse HEAD))"
          else
            echo "set-output name=imgtag::$(git rev-parse --short HEAD)"
            echo "::set-output name=imgtag::$(git rev-parse --short HEAD)"
          fi

  Publish-Binary:
    needs: [Test-Suite, Linting, Docs-Linting, SetEnv]
    environment: ${{ needs.SetEnv.outputs.environment }}
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: src

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # needed to pull changelog

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: src/go.mod

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: release --rm-dist --timeout 500m
          workdir: src
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUDDERSTACK_CORSO_WRITE_KEY: ${{ secrets.RUDDERSTACK_CORSO_WRITE_KEY }}
          RUDDERSTACK_CORSO_DATA_PLANE_URL: ${{ secrets.RUDDERSTACK_CORSO_DATA_PLANE_URL }}
          CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}

      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: corso
          path: src/dist/*

  Publish-Image-Linux:
    name: Build and Publish Containers (Linux)
    needs: [ Linting, Docs-Linting, SetEnv]
    environment: ${{ needs.SetEnv.outputs.environment }}
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: build
    env:
      PLATFORMS: linux/amd64,linux/arm64
    steps:
      - uses: actions/checkout@v3

      # Setup buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # retrieve credentials for ghcr.io
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # deploy the image
      - name: Build image and push to GitHub Container Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-linux
          build-args: |
            CORSO_BUILD_LDFLAGS=-X 'github.com/alcionai/corso/src/internal/events.RudderStackWriteKey=${{ secrets.RUDDERSTACK_CORSO_WRITE_KEY }}' -X 'github.com/alcionai/corso/src/internal/events.RudderStackDataPlaneURL=${{ secrets.RUDDERSTACK_CORSO_DATA_PLANE_URL }}' -X 'github.com/alcionai/corso/src/cli.version=${{ needs.SetEnv.outputs.version }}'
          # use the github cache
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Publish-Image-Windows:
    name: Build and Publish Containers (Windows)
    needs: [ Linting, Docs-Linting, SetEnv]
    environment: ${{ needs.SetEnv.outputs.environment }}
    runs-on: windows-2022
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # retrieve credentials for ghcr.io
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build
        run: |
          docker build -f docker/Dockerfile-windows --build-arg CORSO_BUILD_LDFLAGS="-X 'github.com/alcionai/corso/src/internal/events.RudderStackWriteKey=${{ secrets.RUDDERSTACK_CORSO_WRITE_KEY }}' -X 'github.com/alcionai/corso/src/internal/events.RudderStackDataPlaneURL=${{ secrets.RUDDERSTACK_CORSO_DATA_PLANE_URL }}' -X 'github.com/alcionai/corso/src/cli.version=${{ needs.SetEnv.outputs.version }}'" -t ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-windows .

      - name: Docker Push
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-windows

  Publish-Image-Manifest:
    name: Publish manifest for images
    needs: [Publish-Image-Linux, Publish-Image-Windows, SetEnv]
    environment: ${{ needs.SetEnv.outputs.environment }}
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # retrieve credentials for ghcr.io
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=sha,format=short,prefix=
            type=raw,value=nightly

      - name: Docker Manifest create
        run: |
          docker buildx imagetools create \
            -t ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }} \
            ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-linux \
            ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-windows

      - name: Docker Manifest create nightly
        if: github.ref == 'refs/heads/main'
        run: |
          docker buildx imagetools create \
            -t ${{ env.IMAGE_NAME }}:nightly \
            ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-linux \
            ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-windows

      - name: Docker Manifest create latest
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker buildx imagetools create \
            -t ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-linux \
            ${{ env.IMAGE_NAME }}:${{ needs.SetEnv.outputs.imgtag }}-windows

  Validate-Linux-Artifacts:
    needs: [Publish-Binary, Publish-Image, SetEnv]
    environment: Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}
    steps:
      - name: Validate x86_64 binary artifacts
        run: |
          set -ex
          curl -L https://github.com/alcionai/corso/releases/download/${{ env.CORSO_VERSION }}/corso_${{ env.CORSO_VERSION }}_Linux_x86_64.tar.gz > corso.tar.gz
          tar -xf corso.tar.gz
          ./corso --help
          ./corso --version 2>&1 | grep -E "^version: ${{ env.CORSO_VERSION }}$"

      - name: Validate arm64 binary artifacts
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: armv7
          distro: ubuntu18.04
          install: |
            apt-get -y update && apt-get -y install curl
          run: |
            set -ex
            sudo apt-get update && sudo apt-get install curl
            curl -L https://github.com/alcionai/corso/releases/download/${{ env.CORSO_VERSION }}/corso_${{ env.CORSO_VERSION }}_Linux_arm64.tar.gz > corso.tar.gz
            tar -xf corso.tar.gz
            ./corso --help
            ./corso --version 2>&1 | grep -E "^version: ${{ env.CORSO_VERSION }}$"

  Validate-Docker-Artifacts:
    needs: [Publish-Binary, Publish-Image, SetEnv]
    environment: Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Validate amd64 container images
        run: |
          docker run --platform linux/amd64 ghcr.io/alcionai/corso:${{ env.CORSO_VERSION }} --help
          docker run --platform linux/amd64 ghcr.io/alcionai/corso:${{ env.CORSO_VERSION }} --version | grep -E "^version: ${{ env.CORSO_VERSION }}$"

      - name: Validate arm64 container images
        run: |
          docker run --platform linux/arm64 ghcr.io/alcionai/corso:${{ env.CORSO_VERSION }} --help
          docker run --platform linux/amd64 ghcr.io/alcionai/corso:${{ env.CORSO_VERSION }} --version | grep -E "^version: ${{ env.CORSO_VERSION }}$"

  Validate-MacOS-Artifacts:
    needs: [Publish-Binary, Publish-Image, SetEnv]
    environment: Testing
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}
    steps:
      - name: Validate x86_64 binary artifacts
        run: |
          set -ex
          curl -L https://github.com/alcionai/corso/releases/download/${{ env.CORSO_VERSION }}/corso_${{ env.CORSO_VERSION }}_Darwin_x86_64.tar.gz > corso.tar.gz
          tar -xf corso.tar.gz
          ./corso --help
          ./corso --version 2>&1 | grep -E "^version: ${{ env.CORSO_VERSION }}$"

      - name: Validate arm64 binary artifacts
        run: |
          set -ex
          curl -L https://github.com/alcionai/corso/releases/download/${{ env.CORSO_VERSION }}/corso_${{ env.CORSO_VERSION }}_Darwin_arm64.tar.gz > corso.tar.gz
          tar -xf corso.tar.gz
          # TODO: test/validate arm64 executable

  Validate-Windows-Artifacts:
    needs: [Publish-Binary, Publish-Image, SetEnv]
    environment: Testing
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}
    steps:
      - name: Validate x86_64 binary artifacts
        run: |
          curl -L https://github.com/alcionai/corso/releases/download/${{ env.CORSO_VERSION }}/corso_${{ env.CORSO_VERSION }}_Windows_x86_64.zip -o corso.zip
          7z x corso.zip
          ./corso.exe --help
          ./corso.exe --version 2>&1 | grep -E "^version: ${{ env.CORSO_VERSION }}$"
 
      - name: Validate amd64 container images
        run: |
          docker run ghcr.io/alcionai/corso:${{ env.CORSO_VERSION }} --help
          docker run ghcr.io/alcionai/corso:${{ env.CORSO_VERSION }} --version | grep -E "^version: ${{ env.CORSO_VERSION }}$"


  Publish-Docs:
    needs: [SetEnv, Validate-Linux-Artifacts, Validate-MacOS-Artifacts, Validate-Docker-Artifacts, Validate-Windows-Artifacts]
    environment: ${{ needs.SetEnv.outputs.environment }}
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || needs.precheck.outputs.docfileschanged == 'true' # docsfileschanged also includes srcfileschanged
    defaults:
      run:
        working-directory: docs

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@master
        name: Download cli docs from build step
        with:
          name: cli-docs
          path: docs/docs/cli

      - name: Configure AWS credentials from Test account
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: integration-testing
          aws-region: us-east-1

      - name: Build docs
        env:
          CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}
        run: |
          npm ci
          npm run build

      - name: Add rotbots.txt
        if: github.ref == 'refs/heads/main'
        run: |
          printf 'User-agent: *\nDisallow: /' > build/robots.txt

      - name: Push docs
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        run: |
          aws s3 sync build "s3://${{ secrets.DOCS_S3_BUCKET }}"

      - name: Invalidate cloudfront
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DOCS_CF_DISTRIBUTION }} --paths "/*"

  Validate-Docs-Artifacts:
    needs: [Publish-Docs, SetEnv]
    environment: Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      CORSO_VERSION: ${{ needs.SetEnv.outputs.version }}
    steps:
      - name: Validate docs
        run: |
          curl https://docs.corsobackup.io/preview/quickstart/ | grep https://github.com/alcionai/corso/releases/download/${{ env.CORSO_VERSION }}/corso_${{ env.CORSO_VERSION }}_Linux_x86_64.tar.gz