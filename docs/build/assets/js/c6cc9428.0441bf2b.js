"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),p=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},s=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,f=s["".concat(u,".").concat(m)]||s[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));n(8209);const a={},i="Building Corso",l={unversionedId:"developers/build",id:"developers/build",title:"Building Corso",description:"Binary",source:"@site/docs/developers/build.md",sourceDirName:"developers",slug:"/developers/build",permalink:"/docs/developers/build",draft:!1,editUrl:"https://github.com/alcionai/corso/tree/main/docs/docs/developers/build.md",tags:[],version:"current",frontMatter:{}},u={},p=[{value:"Binary",id:"binary",level:2},{value:"Building locally",id:"building-locally",level:3},{value:"Building via Docker",id:"building-via-docker",level:3},{value:"Container Image",id:"container-image",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"building-corso"},"Building Corso"),(0,r.kt)("h2",{id:"binary"},"Binary"),(0,r.kt)("h3",{id:"building-locally"},"Building locally"),(0,r.kt)("p",null,"Corso is a Go project, and you can build it with ",(0,r.kt)("inlineCode",{parentName:"p"},"go build")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"<repo root>/src"),"\nif you have Go installed on your system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# run from within `./src`\ngo build -o corso \n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you don't have Go available, you can find installation instructions ",(0,r.kt)("a",{parentName:"p",href:"https://go.dev/doc/install"},"here"))),(0,r.kt)("p",null,"This will generate a binary named ",(0,r.kt)("inlineCode",{parentName:"p"},"corso")," in the directory where you run the build."),(0,r.kt)("h3",{id:"building-via-docker"},"Building via Docker"),(0,r.kt)("p",null,"For convenience, the Corso build tooling is containerized. To take advantage, you need\n",(0,r.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," installed on your machine."),(0,r.kt)("p",null,"To build Corso via docker, use the following command from the root of your repo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./build/build.sh binary\n")),(0,r.kt)("p",null,"By default, we will build for your current platform. You can pass in\nall the architectures/platforms you would like to build it for using\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"--platforms")," flag as a comma separated list. For example, if you\nwould like to build ",(0,r.kt)("inlineCode",{parentName:"p"},"amd64")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"arm64")," versions for Linux, you can\nrun the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./build/build.sh binary --platforms linux/amd64,linux/arm64\n")),(0,r.kt)("p",null,"Once built, the resulting binaries will be available in ",(0,r.kt)("inlineCode",{parentName:"p"},"<repo root>/bin")," for all the different platforms you specified."),(0,r.kt)("h2",{id:"container-image"},"Container Image"),(0,r.kt)("p",null,"If you prefer to build Corso as a container image, use the following command instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Use --help to see all available options\n./build/build.sh image\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," used to build the image is available at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alcionai/corso/blob/main/build/Dockerfile"},(0,r.kt)("inlineCode",{parentName:"a"},"build/Dockerfile")))),(0,r.kt)("p",null,"Similar to binaries, we build your a container image for your current\nplatform by default, but you can change it by explicitly passing in\nthe platforms that you would like to build for.\nIn addition, you can optionally pass the tag that you would like to\napply for the image using ",(0,r.kt)("inlineCode",{parentName:"p"},"--tag")," option."),(0,r.kt)("p",null,"For example, you can use the following command to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"arm64"),"\nimage with the tag ",(0,r.kt)("inlineCode",{parentName:"p"},"ghcr.io/alcionai/corso:latest"),", you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./build/build.sh image --platforms linux/arm64 --tag ghcr.io/alcionai/corso:latest\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you run into any issues with building cross platform images, make\nsure to follow the instructions on ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/build/building/multi-platform/"},"Docker\ndocs")," to setup\nthe build environment for Multi-platform images.")))}d.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);